@page "/fetchdata"
@using Blazor.AdaptiveCards.Templating;

<h1>Adaptive Card</h1>

<AdaptiveCards Models="@Customers" TemplateSelector="TemplateSelector" 
        ContainerClass="card-columns" 
        Attributes="@(new Dictionary<string, object>()
        {
            { "class", "card-columns" },
        })"
        CardClass="adaptive-card"
        CardAttributes="@(new Dictionary<string, object>() { { "data-aos", "fade" } })"
        CardAttributeFunctions="@(new List<(string, Func<int, Customer, object>)>()
                              {("data-aos-delay", (i, customer) => (i*100).ToString() )}
        )">

</AdaptiveCards>    

@*<br/>

<textarea style="width:100%" rows="10" @bind="@schema"></textarea>
<button @onclick="UpdateSchema" class="btn btn-primary">Update schema</button>*@

@code {

    //string schema = "";
    private List<Customer> Customers = new List<Customer>();

    [Inject]
    private IModelTemplateCatalog ModelTemplateCatalog { get; set; }

    protected override void OnInitialized()
    {
        Customers.Clear();

        for(int i = 0; i < 10; i++)
        {
            Customers.Add(new Customer() { FirstName = $"Person {i}", LastName = "Lastname" });
        }
    }

    public async Task UpdateSchema()
    {
        //        await card.RenderCard(schema);
    }

    public async Task Submit((string, object) data)
    {
    }

    public string TemplateSelector(Customer model)
    {
        if (model.FirstName == "Mikael")
        {
            return ModelTemplateCatalog.Get("Alternative");
        }
        else
        {
            return ModelTemplateCatalog.Get(model.GetType().Name);
        }
    }
}