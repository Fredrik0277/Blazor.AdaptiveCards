@page "/fetchdata3"
@using global::AdaptiveCards.Blazor.Templating

<div class="row">
    <div class="col-12">
        <h1>Adaptive Cards</h1>
    </div>
</div>

<div class="row">
    <div class="col-12">
        <ListAdaptiveCards Models="@Customers" TemplateSelector="TemplateSelector" RenderMode="@RenderMode.Asynchronous"
                       ContainerClass=""
                       Attributes="@(new Dictionary<string, object>()
        {
            { "class", "card-columns" },
        })"
                       CardClass=""
                       CardAttributes="@(new Dictionary<string, object>() { { "data-aos", "fade-left" } })"
                       CardAttributeFunctions="@(new List<(string, Func<int, Customer, object>)>()
                              {("data-aos-delay", (i, customer) => (i*200).ToString() ),
                                  ("data-aos-duration", (i, customer) => (500).ToString() )}
        )">

        </ListAdaptiveCards>
    </div>
</div>


@*<br/>

    <textarea style="width:100%" rows="10" @bind="@schema"></textarea>
    <button @onclick="UpdateSchema" class="btn btn-primary">Update schema</button>*@

@code {

    //string schema = "";
    private List<Customer> Customers = new List<Customer>();

    [Inject]
    private IModelTemplateCatalog ModelTemplateCatalog { get; set; }

    protected override void OnInitialized()
    {
        Customers.Clear();

        for (int i = 0; i < 10; i++)
        {
            Customers.Add(new Customer() { FirstName = $"Person {i}", LastName = "Lastname" });
        }
    }

    public async Task UpdateSchema()
    {
        //        await card.RenderCard(schema);
    }

    public async Task Submit((string, object) data)
    {
    }

    public string TemplateSelector(Customer model)
    {
        if (model.FirstName == "Mikael")
        {
            return ModelTemplateCatalog.Get("Alternative");
        }
        else
        {
            return ModelTemplateCatalog.Get(model.GetType().Name);
        }
    }
}